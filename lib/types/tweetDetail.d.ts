// Autogenerated types using https://github.com/shakyShane/json-ts
export default interface TweetDetail {
    data: Data;
    errors?: ErrorsItem[];
}
interface Data {
    threaded_conversation_with_injections_v2?: Threaded_conversation_with_injections_v2;
}
interface Threaded_conversation_with_injections_v2 {
    instructions: InstructionsItem[];
    metadata?: Metadata;
}
interface InstructionsItem {
    type: string;
    entries?: EntriesItem[];
    direction?: string;
}
interface EntriesItem {
    entryId: string;
    sortIndex: string;
    content: Content;
}
interface Content {
    entryType: string;
    __typename: string;
    itemContent?: ItemContent;
    items?: ItemsItem[];
    displayType?: string;
    clientEventInfo?: ClientEventInfo;
    feedbackInfo?: FeedbackInfo;
}
interface ItemContent {
    itemType: string;
    __typename: string;
    tweet_results?: Tweet_results;
    tweetDisplayType?: string;
    hasModeratedReplies?: boolean;
    value?: string;
    cursorType?: string;
    displayTreatment?: DisplayTreatment;
    tombstoneDisplayType?: string;
    tombstoneInfo?: TombstoneInfo;
}
interface Tweet_results {
    result?: Result;
}
interface Result {
    __typename?: string;
    rest_id?: string;
    core?: Core;
    unmention_info?: Unmention_info;
    views?: Views;
    source?: string;
    legacy?: Legacy;
    id?: string;
    affiliates_highlighted_label?: Affiliates_highlighted_label;
    has_nft_avatar?: boolean;
    super_follow_eligible?: boolean;
    super_followed_by?: boolean;
    super_following?: boolean;
    business_account?: Business_account;
    professional?: Professional;
    tombstone?: Tombstone;
    quoted_status_result?: Quoted_status_result;
    card?: Card;
    unified_card?: Unified_card;
    quotedRefResult?: QuotedRefResult;
    birdwatch_pivot?: Birdwatch_pivot;
    superFollowsReplyUserResult?: SuperFollowsReplyUserResult;
}
interface Core {
    user_results: User_results;
}
interface User_results {
    result: Result;
}
interface Affiliates_highlighted_label {
    label?: Label;
}
interface Legacy {
    'protected'?: boolean;
    created_at?: string;
    default_profile?: boolean;
    default_profile_image?: boolean;
    description?: string;
    entities?: Entities;
    fast_followers_count?: number;
    favourites_count?: number;
    followers_count?: number;
    friends_count?: number;
    has_custom_timelines?: boolean;
    is_translator?: boolean;
    listed_count?: number;
    location?: string;
    media_count?: number;
    name?: string;
    normal_followers_count?: number;
    pinned_tweet_ids_str?: string[];
    possibly_sensitive?: boolean;
    profile_banner_url?: string;
    profile_image_url_https?: string;
    profile_interstitial_type?: string;
    screen_name?: string;
    statuses_count?: number;
    translator_type?: string;
    url?: string;
    verified?: boolean;
    withheld_in_countries?: any[];
    bookmark_count?: number;
    bookmarked?: boolean;
    conversation_id_str?: string;
    display_text_range?: number[];
    extended_entities?: Extended_entities;
    favorite_count?: number;
    favorited?: boolean;
    full_text?: string;
    is_quote_status?: boolean;
    lang?: string;
    possibly_sensitive_editable?: boolean;
    quote_count?: number;
    reply_count?: number;
    retweet_count?: number;
    retweeted?: boolean;
    user_id_str?: string;
    id_str?: string;
    in_reply_to_screen_name?: string;
    in_reply_to_status_id_str?: string;
    in_reply_to_user_id_str?: string;
    self_thread?: Self_thread;
    quoted_status_id_str?: string;
    quoted_status_permalink?: Quoted_status_permalink;
    binding_values?: BindingValuesItem[];
    card_platform?: Card_platform;
    user_refs_results?: UserRefsResultsItem[];
    verified_type?: string;
    place?: Place;
    supplemental_language?: string;
    conversation_control?: Conversation_control;
    coordinates?: Coordinates;
    geo?: Geo;
    scopes?: Scopes;
}
interface Entities {
    description?: Description;
    url?: Url;
    media?: MediaItem[];
    user_mentions?: UserMentionsItem[];
    urls?: UrlsItem[];
    hashtags?: HashtagsItem[];
    symbols?: SymbolsItem[];
}
interface Description {
    urls: UrlsItem[];
}
interface Url {
    urls?: UrlsItem[];
    url?: string;
    urlType?: string;
}
interface UrlsItem {
    display_url: string;
    expanded_url: string;
    url: string;
    indices: number[];
}
interface Business_account {
    affiliates_count?: number;
}
interface Unmention_info {
}
interface Views {
    state: string;
}
interface MediaItem {
    display_url: string;
    expanded_url: string;
    id_str: string;
    indices: number[];
    media_url_https: string;
    type: string;
    url: string;
    sizes: Sizes;
    original_info: Original_info;
    media_key?: string;
    additional_media_info?: Additional_media_info;
    mediaStats?: MediaStats;
    ext_media_availability?: Ext_media_availability;
    video_info?: Video_info;
    ext_alt_text?: string;
    source_status_id_str?: string;
    source_user_id_str?: string;
}
interface Sizes {
    large: Large;
    medium: Medium;
    small: Small;
    thumb: Thumb;
}
interface Large {
    h: number;
    w: number;
    resize: string;
}
interface Medium {
    h: number;
    w: number;
    resize: string;
}
interface Small {
    h: number;
    w: number;
    resize: string;
}
interface Thumb {
    h: number;
    w: number;
    resize: string;
}
interface Original_info {
    height: number;
    width: number;
    focus_rects?: FocusRectsItem[];
}
interface Extended_entities {
    media: MediaItem[];
}
interface Additional_media_info {
    monetizable: boolean;
    source_user?: Source_user;
    title?: string;
    description?: string;
    call_to_actions?: Call_to_actions;
    embeddable?: boolean;
}
interface MediaStats {
    viewCount: number;
}
interface Ext_media_availability {
    status: string;
}
interface Video_info {
    aspect_ratio: number[];
    duration_millis?: number;
    variants: VariantsItem[];
}
interface VariantsItem {
    bitrate?: number;
    content_type: string;
    url: string;
}
interface ItemsItem {
    entryId: string;
    item: Item;
}
interface Item {
    itemContent: ItemContent;
    clientEventInfo: ClientEventInfo;
}
interface UserMentionsItem {
    id_str: string;
    name: string;
    screen_name: string;
    indices: number[];
}
interface ClientEventInfo {
    details: Details;
}
interface Details {
    conversationDetails: ConversationDetails;
    timelinesDetails?: TimelinesDetails;
}
interface ConversationDetails {
    conversationSection: string;
}
interface TimelinesDetails {
    controllerData: string;
}
interface DisplayTreatment {
    actionText: string;
    labelText?: string;
}
interface Professional {
    rest_id: string;
    professional_type: string;
    category: CategoryItem[];
}
interface CategoryItem {
    id: number;
    name: string;
    icon_name: string;
}
interface Self_thread {
    id_str: string;
}
interface FocusRectsItem {
    x: number;
    y: number;
    w: number;
    h: number;
}
interface Tombstone {
    __typename: string;
    text: Text;
}
interface Text {
    rtl: boolean;
    text: string;
    entities: EntitiesItem[];
}
interface EntitiesItem {
    fromIndex: number;
    toIndex: number;
    ref: Ref;
}
interface Ref {
    type: string;
    url: string;
    urlType: string;
    screen_name?: string;
    mention_results?: Mention_results;
}
interface Metadata {
    reader_mode_config: Reader_mode_config;
}
interface Reader_mode_config {
    is_reader_mode_available: boolean;
}
interface Quoted_status_result {
    result: Result;
}
interface Quoted_status_permalink {
    url: string;
    expanded: string;
    display: string;
}
interface Card {
    rest_id: string;
    legacy: Legacy;
}
interface BindingValuesItem {
    key: string;
    value: Value;
}
interface Value {
    string_value?: string;
    type: string;
    image_value?: Image_value;
    scribe_key?: string;
    user_value?: User_value;
    image_color_value?: Image_color_value;
    boolean_value?: boolean;
}
interface Image_value {
    height: number;
    width: number;
    url: string;
    alt?: string;
}
interface User_value {
    id_str: string;
    path: any[];
}
interface Image_color_value {
    palette: PaletteItem[];
}
interface PaletteItem {
    rgb: Rgb;
    percentage: number;
}
interface Rgb {
    blue: number;
    green: number;
    red: number;
}
interface Card_platform {
    platform: Platform;
}
interface Platform {
    audience: Audience;
    device: Device;
}
interface Audience {
    name: string;
}
interface Device {
    name: string;
    version: string;
}
interface UserRefsResultsItem {
    result: Result;
}
interface Unified_card {
    card_fetch_state: string;
}
interface HashtagsItem {
    indices: number[];
    text: string;
}
interface Place {
    attributes: Attributes;
    bounding_box: Bounding_box;
    contained_within: any[];
    country: string;
    country_code: string;
    full_name: string;
    name: string;
    id: string;
    place_type: string;
    url: string;
}
interface Attributes {
}
interface Bounding_box {
    coordinates: any[];
    type: string;
}
interface ErrorsItem {
    message: string;
    locations: LocationsItem[];
    path: string[] | (string | number)[];
    extensions: Extensions;
    code: number;
    kind: string;
    name: string;
    source: string;
    tracing: Tracing;
    retry_after?: number;
}
interface LocationsItem {
    line: number;
    column: number;
}
interface Extensions {
    name: string;
    source: string;
    code: number;
    kind: string;
    tracing: Tracing;
    retry_after?: number;
}
interface Tracing {
    trace_id: string;
}
interface Source_user {
    user_results: User_results;
}
interface Label {
    url?: Url;
    badge: Badge;
    description: string;
    userLabelType?: string;
    userLabelDisplayType?: string;
    longDescription?: LongDescription;
}
interface Badge {
    url: string;
}
interface Call_to_actions {
    watch_now?: Watch_now;
    visit_site?: Visit_site;
}
interface Watch_now {
    url: string;
}
interface Conversation_control {
    policy: string;
    conversation_owner_results: Conversation_owner_results;
}
interface Conversation_owner_results {
    result: Result;
}
interface QuotedRefResult {
    result: Result;
}
interface Birdwatch_pivot {
    destinationUrl: string;
    footer: Footer;
    note: Note;
    subtitle: Subtitle;
    title: string;
    iconType: string;
}
interface Footer {
    text: string;
    entities: EntitiesItem[];
}
interface Note {
    rest_id: string;
    data_v1: Data_v1;
    decided_by: string;
    rating_status: string;
    rating_survey: Rating_survey;
    helpful_tags: string[];
    tweet_results: Tweet_results;
    birdwatch_profile: Birdwatch_profile;
    created_at: number;
}
interface Data_v1 {
    classification: string;
    summary: Summary;
    misleading_tags: string[];
    trustworthy_sources: boolean;
}
interface Summary {
    text: string;
    entities: EntitiesItem[];
}
interface Rating_survey {
    url: string;
    urlType: string;
}
interface Birdwatch_profile {
    alias: string;
    ratings_count: Ratings_count;
    notes_count: Notes_count;
}
interface Ratings_count {
    successful: Successful;
    unsuccessful: Unsuccessful;
    last_updated_at: number;
    rated_after_decision: number;
    awaiting_more_ratings: number;
}
interface Successful {
    helpful_count: number;
    not_helpful_count: number;
    total: number;
}
interface Unsuccessful {
    helpful_count: number;
    not_helpful_count: number;
    total: number;
}
interface Notes_count {
    currently_rated_helpful: number;
    currently_rated_not_helpful: number;
    awaiting_more_ratings: number;
    last_updated_at: number;
}
interface Subtitle {
    text: string;
    entities: EntitiesItem[];
}
interface SuperFollowsReplyUserResult {
    result: Result;
}
interface Coordinates {
    type: string;
    coordinates: number[];
}
interface Geo {
    type: string;
    coordinates: number[];
}
interface Scopes {
    followers: boolean;
}
interface TombstoneInfo {
    text: string;
    richText: RichText;
}
interface RichText {
    rtl: boolean;
    text: string;
    entities: EntitiesItem[];
}
interface FeedbackInfo {
    clientEventInfo: ClientEventInfo;
    feedbackKeys: any[];
}
interface SymbolsItem {
    indices: number[];
    text: string;
}
interface Visit_site {
    url: string;
}
interface LongDescription {
    text: string;
    entities: EntitiesItem[];
}
interface Mention_results {
    result: Result;
}

